(load-file "src/opennlp.clj")
(load-file "src/opennlp2.clj")
(load-file "src/conduit.clj")
(load-file "src/lamina.clj")
(load-file "src/lamina1.clj")
(load-file "src/lamina2.clj")
(import '(java.io ByteArrayInputStream ByteArrayOutputStream)
           (java.security KeyPairGenerator SecureRandom))
(load-file "src/alice.clj")
(load-file "src/frinj.clj")
(load-file "src/jsonpath.clj")
(use '[json-path])
(at-path "$.hello" "{:hello \"world\"}") 
(use '[cheshire.core])
(at-path "$.foo" (parse-string "{\"foo\":\"bar\"}"))
(parse-string "{\"foo\":\"bar\"}")
(at-path "$.foo" (parse-string "{\"foo\":\"bar\"}"))
(at-path "$.foo" (parse-string (generate-string {:foo ["a", "b", "c"]})))
(at-path "$.foo.*" (parse-string (generate-string {:foo ["a", "b", "c"]})))
(at-path "$." (parse-string "{\"foo\":\"bar\"}"))
(at-path "$.foo" (parse-string "{\":foo\":\"bar\"}"))
(parse-string "{\":foo\":\"bar\"}")
(at-path "$." (parse-string "{\":foo\":\"bar\"}"))
(at-path "$." (parse-string "{\"foo\":\"[bar]\"}"))
(at-path "$." (parse-string "{\"foo\":[\"bar\"]}"))
(at-path "$.foo" (parse-string "{\"foo\":[\"bar\"]}"))
(parse-string "{\":foo\":\"bar\"}" (fn [k] (keyword k)))
(parse-string "{\"foo\":\"bar\"}" (fn [k] (keyword k)))
(at-path "$." (parse-string "{\"foo\":\"bar\"}" (fn [k] (keyword k))))
(at-path "$.foo" (parse-string "{\"foo\":\"bar\"}" (fn [k] (keyword k))))
(load-file "src/netz.clj")
(ns your-namespace
)
(ns your-namespace
  (:require [netz.core :as netz]))
(def examples [[[0 0] [1]]
               [[0 1] [0]]
               [[1 0] [0]]
               [[1 1] [1]]])
(def network (netz/train examples {:hidden-neurons [0]}))
(netz/run network [0 0])
(def network (netz/train examples {:hidden-neurons [1]}))
(netz/run network [0 0])
(netz/run network [0 0]))
(require '[netz.core :as netz])
(def network (netz/train examples {:hidden-neurons [0]}))
(def network (netz/train examples {:hidden-neurons [1]}))
(netz/run network [0 0])
(netz/run network [0 1])
(netz/run network [1 1])
